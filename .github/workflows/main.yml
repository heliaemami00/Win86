name: Run Masoud EXE with Detailed Logs

on:
  workflow_dispatch:

jobs:
  run-masoud:
    runs-on: windows-latest
    timeout-minutes: 300

    steps:
      - name: Prepare log folder
        shell: powershell
        run: |
          New-Item -Path C:\app -ItemType Directory -Force | Out-Null
          New-Item -Path C:\app\logs -ItemType Directory -Force | Out-Null
          Write-Host "✓ Prepared C:\app and C:\app\logs"

      - name: Add Windows Defender exclusions (BEFORE download)
        shell: powershell
        run: |
          Write-Host "⏳ Configuring Windows Defender exclusions..."
          try {
            # Exclude the entire folder
            Add-MpPreference -ExclusionPath "C:\app" -ErrorAction Stop
            Write-Host "✓ Added folder exclusion: C:\app"
            
            # Exclude the specific process
            Add-MpPreference -ExclusionProcess "masoud.exe" -ErrorAction Stop
            Write-Host "✓ Added process exclusion: masoud.exe"
            
            Write-Host "✓ All Defender exclusions configured successfully"
          } catch {
            Write-Host "⚠ Warning: Could not add exclusions: $($_.Exception.Message)"
            Write-Host "  Continuing anyway... (might face blocking issues)"
          }

      - name: Download RAR with retries
        shell: powershell
        run: |
          $url = 'https://github.com/masezahedi/MasoudApp/raw/main/Masoud-6.24.0-windows-x64.rar'
          $out = 'C:\app\app.rar'
          $maxAttempts = 3
          $attempt = 0
          $success = $false

          while ($attempt -lt $maxAttempts -and -not $success) {
            $attempt++
            Write-Host "⏳ Download attempt $attempt/$maxAttempts..."
            try {
              Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing -ErrorAction Stop
              if (Test-Path $out) {
                $size = (Get-Item $out).Length
                Write-Host "✓ Downloaded successfully - Size: $([math]::Round($size/1MB, 2)) MB"
                if ($size -gt 0) {
                  $success = $true
                } else {
                  Write-Host "✗ File size is 0 bytes"
                }
              } else {
                Write-Host "✗ File not found after download"
              }
            } catch {
              Write-Host "✗ Attempt $attempt failed: $($_.Exception.Message)"
            }
            if (-not $success -and $attempt -lt $maxAttempts) { 
              Write-Host "  Waiting 5 seconds before retry..."
              Start-Sleep -Seconds 5 
            }
          }

          if (-not $success) {
            Write-Host "✗ ALL DOWNLOAD ATTEMPTS FAILED"
            exit 1
          }

      - name: Install unrar
        shell: powershell
        run: |
          Write-Host "⏳ Installing unrar via chocolatey..."
          try {
            choco install unrar -y -ErrorAction Stop | Out-Null
            Write-Host "✓ unrar installed successfully"
          } catch {
            Write-Host "✗ Failed to install unrar: $($_.Exception.Message)"
            exit 1
          }

      - name: Extract RAR
        shell: powershell
        run: |
          $in = 'C:\app\app.rar'
          $dest = 'C:\app'

          if (-not (Test-Path $in)) {
            Write-Host "✗ RAR file not found: $in"
            exit 1
          }

          Write-Host "⏳ Extracting $in..."
          try {
            unrar x $in $dest *>&1 | Out-Null
            $exit = $LASTEXITCODE
            if ($exit -eq 0) {
              Write-Host "✓ Extraction completed successfully"
              $items = @(Get-ChildItem $dest -Recurse -ErrorAction SilentlyContinue)
              Write-Host "  Files extracted: $($items.Count) items"
            } else {
              Write-Host "✗ Extraction failed with exit code: $exit"
              exit 1
            }
          } catch {
            Write-Host "✗ Exception during extraction: $($_.Exception.Message)"
            exit 1
          }

      - name: Find masoud.exe
        shell: powershell
        id: findexe
        run: |
          Write-Host "⏳ Searching for masoud.exe..."
          $exe = Get-ChildItem -Path C:\app -Recurse -Filter "masoud.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if (-not $exe) {
            Write-Host "✗ masoud.exe not found!"
            exit 1
          }
          
          $path = $exe.FullName
          Write-Host "✓ Found masoud.exe at: $path"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "exePath=$path"

      - name: Run masoud.exe
        shell: powershell
        run: |
          $exePath = '${{ steps.findexe.outputs.exePath }}'
          
          if (-not (Test-Path $exePath)) {
            Write-Host "✗ Executable not found at: $exePath"
            exit 1
          }
          
          Write-Host "⏳ Running masoud.exe..."
          Write-Host "  Path: $exePath"
          try {
            & $exePath *> C:\app\masoud_output.log
            $exit = $LASTEXITCODE
            
            if ($exit -eq 0) {
              Write-Host "✓ Program executed successfully (exit code: 0)"
            } else {
              Write-Host "⚠ Program finished with exit code: $exit"
            }
            
            Write-Host ""
            Write-Host "📄 Program output (first 100 lines):"
            Write-Host "───────────────────────────────────"
            Get-Content C:\app\masoud_output.log -TotalCount 100
            Write-Host "───────────────────────────────────"
            
          } catch {
            Write-Host "✗ Exception while running program: $($_.Exception.Message)"
            exit 1
          }

      - name: Summary
        shell: powershell
        if: always()
        run: |
          Write-Host ""
          Write-Host "╔════════════════════════════════════╗"
          Write-Host "║        EXECUTION SUMMARY           ║"
          Write-Host "╚════════════════════════════════════╝"
          Write-Host ""
          
          $items = @(Get-ChildItem C:\app -Recurse -ErrorAction SilentlyContinue)
          Write-Host "Total files in C:\app: $($items.Count)"
          
          if (Test-Path C:\app\masoud_output.log) {
            $outputSize = (Get-Item C:\app\masoud_output.log).Length
            Write-Host "Program output file size: $([math]::Round($outputSize/1KB, 2)) KB"
          }
          
          Write-Host ""
          Write-Host "Log files created:"
          Get-ChildItem C:\app\logs -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  • $($_.Name)"
          }
          
          Write-Host ""
          Write-Host "✓ Workflow completed"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: masoud-artifacts
          path: |
            C:\app\masoud_output.log
            C:\app\Masoud-6.24.0-windows-x64
